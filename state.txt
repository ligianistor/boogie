class IntCell {

	predicate HigherThanZero() = value->v && v>0
	predicate MultipleOf3() = value->v && (v % 3 == 0)
	predicate MultipleOf6() = value->v && (v % 6 == 0)
	predicate MultipleOf15() = value->v && (v % 15 == 0)

	int value;
	IntCell(int x) {
		value  = x;
	}

	void setValue(int x) {
		value = x;
	}

	Integer getValueInteger() {
		return new Integer(value);
	}
	
	int getValueInt() {
		return value;
	}
}

interface Statelike {
	predicate StateMultipleOf3() = cell -> c && c@1 MultipleOf3()

	//This field cannot be a primary type, it needs to be an object,
	//per the Java documentation.
	final static IntCell cell =  new IntCell(3);    
	Integer computeResult(StateContext context, int num); 
	boolean checkMod3();
}

class StateMultiplySix implements Statelike {

	predicate StateMultipleOf6(int n) = cell -> c && c@1 MultipleOf6(n)

        @Override
	-> this@1 StateMultipleOfSix(num) && context@1 state15()
        public Integer computeResult(final StateContext context, final int num) {
        	context.setState(new StateMultiplyFifteen());
		cell.setValue(num*15);
		return cell.getValueInteger();
        }   

	boolean checkMod3() {
		if (cell.getValueInt() % 3) 
			{ return true; }
		else 
			{ return false; }
	} 
}

class StateMultiplyFifteen implements Statelike {
// We either put all the fields of the derived classes in the interface
// or the predicates that we use in the exterior should not refer to variables
// such as "count". 
	predicate StateMultipleOf15() = cell ->c && c@1 MultipleOf15()

	/** Counter local to this state */
        private int count = 0;

    	@Override
	//We cannot know statically the value of count, so we can't know for 
	//sure which way the "if"" will go.
	//In this case the assertion at the end will be less strong.
	//Another example can be without "if"
	-> this@1 StateMultipleOf15() &&  
	( context@1 state6() || context@1 state15() )
	// TODO need to write something about result here.
        public Integer computeResult(final StateContext context, final int num) {
        	/* Change state after StateMultiplyFifteen's computeResult() gets invoked twice */
        	if(++count > 1) {
            		context.setState(new StateMultiplySix());
        	}
		cell.setValue(num*15);
		return cell.getValueInteger();
    	}  

	//second possible computeResult()
	public Integer computeResult(final StateContext context, final int num) {
        	/* Change state after StateMultiplyFifteen's computeResult() gets invoked twice */
		cell.setValue(num*15);
            	context.setState(new StateMultiplySix());
		return cell.getValueInteger();
    	} 

	boolean checkMod3() {
		if (cell.getValueInt() % 3) 
			{ return true; }
		else 
			{ return false; }
	} 
}

--------------
class StateContext {
    	private Statelike myState;

	predicate state6() = myState instanceof StateMultiplySix
	predicate state15() = myState instanceof StateMultiplyFifteen
	predicate stateContextMultiple3() = myState@1 StateMultipleOf3()
	predicate stateContextMultiple6() = myState@1 StateMultipleOf6()
	predicate stateContextMultiple15() = myState@1 StateMultipleOf15()
// I'm not sure this should be a predicate, with a fraction of its own.
// It is good that it is a predicate because it encapsulates myState.
	-> this@1 state6() &&  this@1 stateContextMultiple3()
    	StateContext() {
        	setState(new StateMultiplySix());
    	}

    	/**
     	* Setter method for the state.
     	* Normally only called by classes implementing the State interface.
     	* @param newState the new state of this context
     	*/
    	void setState(final Statelike newState) {
        	myState = newState;
    	}

	-> (this@1 state6() -> (this@1 stateContextMultiple6() && (result % 6 == 0)))
	&&
	(this@1 state15() -> (this@1 stateContextMultiple15() && (result % 15 == 0)))

	public Integer computeResult(final int num) {
        	return myState.computeResult(this, num);
        }

	boolean checkMod3Context() {
		return myState.checkMod3();
	} 
}

// I need to create a new reference r to StateContext
// and call a method on r, that relies on some property.
// And the method that I call on r needs that property.
---------------------
public class StateClient {
	final StateContext sc;

	StateClient(StateContext sc_) {
		sc = sc_;
	}

	void checkMultiplicity() {
		if (!sc.checkMod3Context())
			throw new Exception();
	}
	
	// Write specs saying that
	// this program will not throw an error.
    	public static void main(String[] args) {
        	final StateContext sc1 = new StateContext();
		StateClient stateClient = new StateClient(sc1);
		stateClient.checkMultiplicity();
		sc1.computeResult(1);
		stateClient.checkMultiplicity();
		sc1.computeResult(2);
		stateClient.checkMultiplicity();
		sc1.computeResult(3);
		stateClient.checkMultiplicity();
		
    }
}
-------------
	
