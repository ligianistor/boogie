Example used for reachability static analysis for the finalizers' problem.
Taken from 
https://secweb.cs.odu.edu/~zeil/cs361/web/website/Lectures/garbageCollection/pages/ar01s01s03.html


class Airport
{
   String airportName;
   Airport[] hasFlightsTo;
   int numberConnections;

predicate basicAirport() =
exists s: String, 
a: Array,
i: int
 :: this.airportName -> s &&
this.hasFlightsTo -> a &&
this.numberConnections -> i 

public Airport(String s, Airport[] a, int i) {
	airportName = s;
	hasFlightsTo = a;
	numberConnections = i;
}

public void increaseNrConnections() {
numberConnections++;
}

public void decreaseNrConnections() {
numberConnections--;
}

//Adds a connection airport to this.
public void addConnAir(Airport connAir) {
hasFlightsTo[numberConnections] = connAir;
increaseNrConnections();
}

//This drops a connection to an airport.
public void dropConnAir(Airport dropConn) {
int i=0;
while (i<numberConnections) {
if (hasFlightsTo[i] == dropConn) {
	for (int j=i;j<numberConnections-1;j++)
		hasFlightsTo[j]=hasFlightsTo[j+1];
i=numberConnections;
decreaseNrConnections();
}
else {
i++;
}
}

}

// The postcondition should say that by finalizing this object 
// we remove pointers to all the objects that this object holds pointers to.
// By removing the pointers, we give back fractions to the main program.
void finalize() {
 System.out.println("The airport " + airportName + " was removed");
}

}


------------------------


import java.util.HashMap;
import java.util.Map;

class Airline {
   String name;
   Map<String , Airport> hubs;

predicate basicAirline() = 
exists name0:String, h:Map<String , Airport> ::
this.name -> name0 && this.hubs -> h

public Airline(String name0) {
	name = name0;
	hubs = new HashMap<String, Airport>(); 
} 

public void setHubs(String s, Airport a) {
hubs.put(s, a);
}

public void dropHub(String s) {
hubs.remove(s);
}

void finalize() {
 System.out.println("The airline " + name + " was removed");
}



public static void main(String[] args)
{
//Create example from webpage.
//Create airport objects.
Airport boston = new Airport("Boston", new Airport[5], 0);
{ boston@1 basicAirport() }
Airport washdc = new Airport("WashingtonDC", new Airport[5], 0);
{ boston@1 basicAirport() && washdc@1 basicAirport() }
Airport ny = new Airport("N.Y.", new Airport[5], 0);
{ boston@1 basicAirport() && washdc@1 basicAirport() && ny@1 basicAirport() }
Airport raleigh = new Airport("Raleigh", new Airport[5], 0);
{ boston@1 basicAirport() && washdc@1 basicAirport() && ny@1 basicAirport() && raleigh@1 basicAirport() }
Airport norfolk = new Airport("Norfolk", new Airport[5], 0);
{ boston@1 basicAirport() && washdc@1 basicAirport() && ny@1 basicAirport() && raleigh@1 basicAirport() && norfolk@1 basicAirport() }
// Now there is a fraction of 1 to all the nodes, since they were just created and nothing was consumed so far.

//Create connection airports.
boston.addConnAir(ny);
// We are consuming some of the fraction to ny because now we have
// a pointer to it from boston too, not only from the main program.
{ boston@1 basicAirport() && washdc@1 basicAirport() && ny@0.9 basicAirport() && raleigh@1 basicAirport() && norfolk@1 basicAirport() }

boston.addConnAir(washdc);
{ boston@1 basicAirport() && washdc@0.9 basicAirport() && ny@0.9 basicAirport() && raleigh@1 basicAirport() && norfolk@1 basicAirport() }

washdc.addConnAir(boston);
{ boston@0.9 basicAirport() && washdc@0.9 basicAirport() && ny@0.9 basicAirport() && raleigh@1 basicAirport() && norfolk@1 basicAirport() }

washdc.addConnAir(norfolk);
{ boston@0.9 basicAirport() && washdc@0.9 basicAirport() && ny@0.9 basicAirport() && raleigh@1 basicAirport() && norfolk@0.9 basicAirport() }

washdc.addConnAir(ny);
{ boston@0.9 basicAirport() && washdc@0.9 basicAirport() && ny@0.8 basicAirport() && raleigh@1 basicAirport() && norfolk@0.9 basicAirport() }

norfolk.addConnAir(raleigh);
{ boston@0.9 basicAirport() && washdc@0.9 basicAirport() && ny@0.8 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() }

raleigh.addConnAir(ny);
{ boston@0.9 basicAirport() && washdc@0.9 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() }

ny.addConnAir(boston);
{ boston@0.8 basicAirport() && washdc@0.9 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() }

ny.addConnAir(washdc);
{ boston@0.8 basicAirport() && washdc@0.8 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() }

Airline jetBlue = new Airline("JetBlue"); 
{ boston@0.8 basicAirport() && washdc@0.8 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }
jetBlue.setHubs("Boston", boston);
//By setting jetBlue to point to boston, we consume another fraction to boston.
{ boston@0.7 basicAirport() && washdc@0.8 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }
jetBlue.setHubs("N.Y.", ny);
{ boston@0.7 basicAirport() && washdc@0.8 basicAirport() && ny@0.6 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }
jetBlue.setHubs("WashingtonDC", washdc);
{ boston@0.7 basicAirport() && washdc@0.7 basicAirport() && ny@0.6 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }
//Finished with setting up the airline.

//Implement removal of nodes like in
//https://secweb.cs.odu.edu/~zeil/cs361/web/website/Lectures/garbageCollection/pages/referenceCounting.html .

jetBlue.dropHub("WashingtonDC");
{ boston@0.7 basicAirport() && washdc@0.8 basicAirport() && ny@0.6 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }

jetBlue.dropHub("Boston");
{ boston@0.8 basicAirport() && washdc@0.8 basicAirport() && ny@0.6 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }

jetBlue.dropHub("N.Y.");
{ boston@0.8 basicAirport() && washdc@0.8 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@0.9 basicAirport() 
&& jetBlue@1 basicAirline() }

washdc.dropConnAir(norfolk);
{ boston@0.8 basicAirport() && washdc@0.8 basicAirport() && ny@0.7 basicAirport() && raleigh@0.9 basicAirport() && norfolk@1 basicAirport() 
&& jetBlue@1 basicAirline() }
// When the fraction goes to 1 and we are not right after creating the object, it means that there are no more pointers to that object and from that moment on the garbage collection can be applied to it. The finalizer or norfolk might be called now and we can assume it will be called and use what its post-condition asserts.

//This is just one example.
//There is a second example that leaves a cycle of airports in.

}

}
