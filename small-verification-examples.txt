// illustrates pack/unpack
class DoubleCount {
  int val;
  int dbl;
  
  predicate OK() = exists v,d: val -> v CROSS dbl -> d CROSS d == v*2

//I might need a few constructors 
//depending on the specific invariant 
//that I want my initial object to satisfy
  public DoubleCount() {

}
  
  void increment() {
    val = val + 1;
	dbl = dbl + 2;
  }
}

// illustrates sharing: can have two Share objects pointing to the same DoubleCount.
// There might be multiple Share objects that point to the same DoubleCount.
//So we don't need 1/2 d, we need k >0 d in the ShareCount predicate
//predicate ShareCount() = exists d: dc -> d CROSS 1/2 d in OK()
class Share {
  DoubleCount dc;


//there are two predicates that have keys to dc
predicate ConstructShare(dc_:DoubleCount) = this.dc -> dc_

predicate ShareCount() = exists d:DoubleCount, k:int: dc -> d CROSS d k in OK()
  
public void touch() {
    dc.increment();
  }
}

main() {
DoubleCount dc = new DoubleCount();
Share s1 = new Share(dc);
Share s2 = new Share(dc);
s1.touch();
//invariant is kept
//s2 can rely on invariant
s2.touch();

}

-------------------------------------------------

// variant: replace DoubleCount with MultCount, with a predicate Mult(x) and d=v*x
// variant: have Share declare predicate ShareCount(MultCount dc) to precisely track the alias, and use it to reclaim full permission of the underlying MultCount, then change x

// simpler example of 2 mutually dependent objects
class Pair {
  int val;
  Pair pair;
  
  predicate OK() = exists v,p,k: 1/2 this in Paired(v,p) CROSS 1/2 p in Paired(v,this) CROSS 1/2 p in OK();
  
  predicate Paired(int v, Pair p) = val -> v CROSS pair -> p

  void increment() {
    // unpack OK
	// unpack 1/2 this in Paired(v,p)
	p.increment1();
	// have packed 1/2 this in Paired(v,p)
	// pack OK
  }
  void increment1() {
    // unpack OK
	// now have 1.0 this in Paired(v,p)
	// unpack 1.0 this in Paired(v,p)
	val = val + 1;
	// pack 1.0 p in Paired(v,this)
	p.increment2();
	// pack OK
  }
  void increment2() {
    // have 1.0 this in Paired(v,p)
	// unpack 1.0 this in Paired(v,p)
	val = val + 1;
	// pack 1.0 this in Paired(v+1,p)
  }
}
------------------------------
Example used for reachability static analysis for the finalizers' problem.
Taken from 
https://secweb.cs.odu.edu/~zeil/cs361/web/website/Lectures/garbageCollection/pages/ar01s01s03.html


class Airport
{
   String airportName;
   Airport[] hasFlightsTo;
   int numberConnections;

public Airport(String s, Airport[] a, int i) {
	airportName = s;
	hasFlightsTo = a;
	numberConnections = i;
}

public void increaseNrConnections() {
numberConnections++;
}

public void decreaseNrConnections() {
numberConnections--;
}

//Adds a connection airport to this.
public void addConnAir(Airport connAir) {
hasFlightsTo[numberConnections] = connAir;
increaseNrConnections();
}

//This drops a connection to an airport.
public void dropConnAir(Airport dropConn) {
int i=0;
while (i<numberConnections) {
if (hasFlightsTo[i] == dropConn) {
	for (int j=i;j<numberConnections-1;j++)
		hasFlightsTo[j]=hasFlightsTo[j+1];
i=numberConnections;
decreaseNrConnections();
}
else {
i++;
}
}

}

}


------------------------


import java.util.HashMap;
import java.util.Map;

class Airline {
   String name;
   Map<String , Airport> hubs;

public Airline(String name0) {
	name = name0;
	hubs = new HashMap<String, Airport>(); 
} 

public void setHubs(String s, Airport a) {
hubs.put(s, a);
}

public void dropHub(String s) {
hubs.remove(s);
}


public static void main(String[] args)
{
//Create example from webpage.
//Create airport objects.
Airport boston = new Airport("Boston", new Airport[5], 0);
Airport washdc = new Airport("WashingtonDC", new Airport[5], 0);
Airport ny = new Airport("N.Y.", new Airport[5], 0);
Airport raleigh = new Airport("Raleigh", new Airport[5], 0);
Airport norfolk = new Airport("Norfolk", new Airport[5], 0);

//Create connection airports.
boston.addConnAir(ny);
boston.addConnAir(washdc);

washdc.addConnAir(boston);
washdc.addConnAir(norfolk);
washdc.addConnAir(ny);

norfolk.addConnAir(raleigh);

raleigh.addConnAir(ny);

ny.addConnAir(boston);
ny.addConnAir(washdc);

Airline jetBlue = new Airline("JetBlue"); 
jetBlue.setHubs("Boston", boston);
jetBlue.setHubs("N.Y.", ny);
jetBlue.setHubs("WashingtonDC", washdc);
//Finished with setting up the airline.

//Implement removal of nodes like in
//https://secweb.cs.odu.edu/~zeil/cs361/web/website/Lectures/garbageCollection/pages/referenceCounting.html .

jetBlue.dropHub("WashingtonDC");

washdc.dropConnAir(norfolk);

//This is just one example.
//There is a second example that leaves a cycle of airports in.

}

}






























