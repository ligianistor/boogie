maps=uninterpreted functions in set theory
defining the semantics of maps
things what to do with maps



public interface Sum {
    predicate sumOK(); // will be defined in the classes
    // sine we do not declare here the fields that the predicate talks about.
    public int calculateSum();
}

//on System A 
class RealSum implements Sum {

   predicate sumOK() = exists s1:int, n1:int :: sum -> s1 && n -> n1 &&
		( sum == n * (n+1) /2 )

	
    private int n;
    private int sum = 0;
    /**
     * Constructor
     * @param filename
     */
    public RealSum(int n_) {
	n = n_; 
        calculateRealSum(n);
    }

    /**
     * Actually calculates the sum.
     */
// This can be transformed into the
// iterative version of the sum.
    private void calculateRealSum(int n) {
        this.sum = n * (n+1) / 2;
    }

    /**
     * Returns the sum.
     */
    public int calculateSum() { 
       return sum;
    }

}

//on System B 
class ProxySum implements Sum {

    predicate sumOK() = exists s1:int, n1:int :: sum -> s1 && n -> n1 &&
		( sum == n * (n+1) /2 )
    private RealSum realSum = null;
    private int n = 0;
    /**
     * Constructor
     * @param filename 
     */
    public ProxySum(int n) { 
        this.n = n; 
    }

    /**
     * Calculates the sum
     */
    public int calculateSum() {
        if (realSum == null) {
           realSum = new RealSum(n);
        } 
      return realSum.calculateSum();
    }
}

class ClientSum {

	Sum sum;
	ClientSum(Sum sum_) { sum = sum_; }
	
	s@1 sumOK() --> 
	bool checksum() {
		//simple code about sum, maybe calling a method on sum.
	}

	main() {
		Sum s = new Sum(5);
		ClientSum client = new ClientSum(s);
		s.calculateSum();
		client.checkSum();
		s.calculateSum();
		client.checksum();
	}


}

