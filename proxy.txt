maps=uninterpreted functions in set theory
defining the semantics of maps
things what to do with maps



public interface Sum {
    public int calculateSum();
}

//on System A 
class RealSum implements Sum {

    private int sum = 0;
    /**
     * Constructor
     * @param filename
     */
    public RealSum(int n) { 
        calculateRealSum(n);
    }

    /**
     * Actually calculates the sum.
     */
// This can be transformed into the
// iterative version of the sum.
    private void calculateRealSum(int n) {
        this.sum = n * (n+1) / 2;
    }

    /**
     * Returns the sum.
     */
    public int calculateSum() { 
       return sum;
    }

}

//on System B 
class ProxySum implements Sum {
    private RealSum realSum = null;
    private int n = 0;
    /**
     * Constructor
     * @param filename 
     */
    public ProxySum(final int n) { 
        this.n = n; 
    }

    /**
     * Calculates the sum
     */
    public int calculateSum() {
        if (realSum == null) {
           realSum = new RealSum(n);
        } 
      return realSum.calculateSum();
    }
}

class ProxyClient {

   /**
    * Test method
    */
   public static void main(String[] args) {
        final Sum sum1 = new ProxySum(5);
        final Sum sum2 = new ProxySum(3);
        
        sum1.calculateSum(); // calculation necessary
        sum1.calculateSum(); // calculation unnecessary
        sum2.calculateSum(); // calculation necessary
        sum2.calculateSum(); // calculation unnecessary
        sum1.calculateSum(); // calculation unnecessary
    }
}

