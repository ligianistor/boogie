class IntCell {
	predicate MultipleOf(int a) = value->v && (v % a == 0)

	int value;

	IntCell(int x) {
		value  = x;
	}

	void setValue(int x) {
		value = x;
	}

	Integer getValueInteger() {
		return new Integer(value);
	}
	
	int getValueInt() {
		return value;
	}
}
----------------------------
class College {
	private final int collegeNumber; 
	private final int numberBuildings; 

	predicate collegeBuildingsMany() = 
		exists c:int, n:int ::
		(collegeNumber -> c) && (numberBuildings -> n) && 
		(n == 10 * c) 

	predicate collegeBuildingsFew() = exists c:int, n:int ::
		(collegeNumber -> c) && (numberBuildings -> n) && (n == 4 * c) 

	College(int number, int multNumber) {
		this.collegeNumber = number;
		this.numberBuildings = this.collegeNumber * multNumber;
	}

	int getCollegeNumber() {
		return collegeNumber;
	}

	--> result@1 MultipleOf(collegeNumber)
	IntCell getNumberFacilities(int campusNumber) {
		return new IntCell(campusNumber * collegeNumber);
	}

	this@1 collegeBuildingsFew() -->
	bool checkFewBuildings() {
		return (numberBuildings == 4 * collegeNumber);
	}

	this@1 collegeBuildingsMany() -->
	bool checkManyBuildings() {
		return (numberBuildings == 10 * collegeNumber);
	}
}
-----------------
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

class ListOfAvailableColleges {
	private Map<Integer, College> listOfColleges = 
		new ConcurrentHashMap<Integer, College>();

	College lookup(int collegeNumber) {
		if (!listOfColleges.containsKey(collegeNumber)) {
			listOfColleges.put(collegeNumber, new College(collegeNumber));
		}
    		return listOfColleges.get(collegeNumber);
	}
}
---------------------------
class StudentApplication { 
	private final College college; 
	private int campusNumber; 
	IntCell facilities;
	int collegeNumber;

	predicate facilitiesOK() = exists f:IntCell, c:int :: 
		this.facilities -> f && this.collegeNumber -> c &&
		(f@1 MultipleOf(c));

	-->this@1 facilitiesOK()
	StudentApplication(College college, int campusNumber) {
		this.college = college;
	    	this.campusNumber = campusNumber;
	    	this.facilities = college.getNumberFacilities(campusNumber);
	    	this.collegeNumber = college.getCollegeNumber();
	}

	this@1 facilitiesOK() -->
	boolean checkNumberFacilities() {        
		return (facilities % collegeNumber == 0);
	}
}

-------------------------------
import java.util.List;
import java.util.Vector;

public class ApplicationWebsite {
	private final List<StudentApplication> listStudentApplications = 
		new Vector<StudentApplication>();
	private final ListOfAvailableColleges listOfAvailableColleges = 
		new ListOfAvailableColleges();

	-->((multNumber == 4) -> result@1 collegeBuildingsFew()) &&
	   ((multNumber == 10) -> result@1 collegeBuildingsMany())
	College submitApplicationGetCollege(
		int collegeNumber, 
		int multNumber,
		int campusNumber
	) {
		College college = listOfAvailableColleges.lookup(collegeNumber);
	    	StudentApplication studentApplication = 
			new StudentApplication(college, campusNumber, multNumber);
	    	listStudentApplications.add(studentApplication);
	    	return college;
	}

	public static void main(String[] args) {
		ApplicationWebsite website = new ApplicationWebsite();

    		College college1 = website.submitApplicationGetCollege(2, 4, 2);
		college1.checkFewBuildings();

		College college2 = website.submitApplicationGetCollege(3, 10, 3);
		college2.checkManyBuildings();
	}	

------------------------------------------
	public static void main(String[] args) {
		College college = new College(collegeBuildingsFew())(2, 4);
		StudentApplication app1 = new Studentapplication(college, 3);
		Studentapplication app2 = new StudentApplication(college, 5);

		app1.checkNumberFacilities();
		app2.checkNumberFacilities();
	}
}

