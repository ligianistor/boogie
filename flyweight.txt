class IntCell {
	
	predicate MultipleOf(int a) = value->v && (v % a == 0)

	int value;
	IntCell(int x) {
		value  = x;
	}

	void setValue(int x) {
		value = x;
	}

	Integer getValueInteger() {
		return new Integer(value);
	}
	
	int getValueInt() {
		return value;
	}
}

// Flyweight is often combined with Composite to implement shared leaf nodes.
// Taken from https://sourcemaking.com/design_patterns/flyweight

// Instances of College will be the Flyweights
class College {
  private final int collegeNumber; // this is the sharable state
  private final int numberCafeterias; // this is also the sharable state
// The sharable state could be a huge image, that had MB of data, but Oprop 
// does not have support for many advanced data structures and that's why I 
// restrict the examples mainly to integers.
// Since I have 2 fields that are sharable state, I can write a predicate like collegeCafeteriasMany()
// and collegeCafeteriasFew().
predicate collegeCafeteriasMany() = exists c:int, n: numberCafeterias ::
	(collegeNumber -> c) && (numberCafeterias -> n) && (n == 10 * c) 

predicate collegeCafeteriasFew() = exists c:int, n: numberCafeterias ::
	(collegeNumber -> c) && (numberCafeterias -> n) && (n == 4 * c) 

// Different College flyweight objects will be able to satisfy the two different invariants.
// and this shows the difference between object propositions and classical invariants.

  College(int number, int multNumber) {
    this.collegeNumber = number;
    this.numberCafeterias = this.collegeNumber * multNumber;
  }

 int getCollegeNumber() {
	return collegeNumber;
 }

// We need to know the campusNumber in order to get the return from this 
// method.
// The invariant is that numberFacilities is a multiple of collegeNumber.
// The interesting part is that it is an invariant that is both about the
// intrinsic part and about the extrinsic part.
// The part that we don't know for sure and that depends on campusNumber is
// what exactly is the value of numberFacilities.
// The parameter campusNumber is the non-sharable, that is provided by the client
// when it calls a method on the college. It is not a field, it is provided in the calling method.
// Instead of using the class Integer, I will use IntCell, like in the state example.
// It is easier to write predicates for a class that I define.
  --> result@1 MultipleOf(collegeNumber)
  IntCell getNumberFacilities(int campusNumber) {
	return new IntCell(campusNumber * collegeNumber);
 }
}
-----------------
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

// ListOfAvailableColleges acts as a factory and cache for College flyweight objects
// The client must use this class in order to create "new" College objects
// Maybe in this class too I could put IntCell as the key to Map instead of Integer.
class ListOfAvailableColleges {
  private Map<Integer, College> listOfColleges = new ConcurrentHashMap<Integer, College>();

  College lookup(int collegeNumber) {
    if (!listOfColleges.containsKey(collegeNumber))
      listOfColleges.put(collegeNumber, new College(collegeNumber));
    return listOfColleges.get(collegeNumber);
  }

}
---------------------------

class StudentApplication {
  private final College college; //intrinsic state
  private int campusNumber; // extrinsic information
  IntCell facilities;
  int collegeNumber;

predicate facilitiesOK() = exists f:IntCell, c:int :: 
	facilities -> f && collegeNumber -> c &&
	(f@1 MultipleOf(c));

  StudentApplication(College college, int campusNumber) {
    this.college = college;
    this.campusNumber = campusNumber;
    this.facilities = college.getNumberFacilities(campusNumber);
    this.collegeNumber = college.getCollegeNumber();
  }

  IntCell getFacilities() {
	return facilities;
  }

// Has as precondition that college.getNumberFacilities(campusNumber) % college.getCollegeNumber()
// should be 0.
  this@1 facilitiesOK() -->
  boolean checkNumberFacilities() {
        
	return (facilities % college.getCollegeNumber() == 0);
  }

}

-------------------------------


import java.util.List;
import java.util.Vector;

public class ApplicationWebsite {
  private final List<StudentApplication> listStudentApplications = new Vector<StudentApplication>();
  private final ListOfAvailableColleges listOfAvailableColleges = new ListOfAvailableColleges();
  Integer facilities;

// Each student application is submitted for a college, but the student can choose which campus of that college
// he or she wants to go to.
  Integer submitApplicationGetFacilities(int collegeNumber, int campusNumber) {
    College college = listOfAvailableColleges.lookup(collegeNumber);
    StudentApplication studentApplication = new StudentApplication(college, campusNumber);
    listStudentApplications.add(studentApplication);
    return new Integer(studentApplication.getNumberFacilities());
  }

// has as precondition that facilities.intValue() is a multiple of x.
boolean checkIntegerMultiple(int x) {
	return (facilities.intValue() % x == 0);
}

  public static void main(String[] args) {
    ApplicationWebsite website = new ApplicationWebsite();

    // All these applications are for college number 2, but for different campuses.
    // They will have the invariant that college number 2 offers, 
    // but will offer slightly different facilties.
    facilities = website.submitApplicationGetFacilities(2, 1); 
    checkIntegerMultiple(2);
    facilities = website.submitApplicationGetFacilities(2, 2);
    checkIntegerMultiple(2);
    facilities = website.submitApplicationGetFacilities(2, 3);
    checkIntegerMultiple(2);

// Here I could use listOfAvailableColleges to lookup a college and assert a property about it.

// I need to state some properties about facilities1, 2 3.

    // The 3 lines below show the difference between object propositions
    // and classical invariants. 
    // We can have 2 instances of College but with different college numbers and hence with different invariants.

    facilities = website.submitApplicationGetFacilities(3, 1);
    checkIntegerMultiple(3); 
    facilities = website.submitApplicationGetFacilities(3, 2);
    checkIntegerMultiple(3);
    facilities = website.submitApplicationGetFacilities(3, 3);
    checkIntegerMultiple(3);
------------------------------------------
 // A simpler client that does not use the class ApplicationWebsite
 // but instead uses all the other classes. The idea is the same in principle, whether we use ApplicationWebsite or not.
College college = new College(collegeCafeteriasFew())(2, 4);
StudentApplication app1 = new Studentapplication(college, 3);
Studentapplication app2 = new StudentApplication(college, 5);

// The method checkNumberFacilities() could have as precondition collegeCafeteriasFew(). 
// It shows that the invariant that the programmer set in the beggining holds,
// even though there are the 2 references app1 and app2 that have different extrinsic state.
app1.checkNumberFacilities();
app2.checkNumberFacilities();

// This client code should verify
// by basing itself on the invariant predicate that the College object provides.
  }
}

