// Flyweight is often combined with Composite to implement shared leaf nodes.
// Taken from https://sourcemaking.com/design_patterns/flyweight

// Instances of College will be the Flyweights
class College {
  private final int collegeNumber; // this is the sharable state
  private int campusNumber; // this is the non-sharable, that is provided by the client
// when it calls a method on the college.

  College(int number) {
    this.collegeNumber = number;
  }

// We need to know the campusNumber in order to get the return from this 
// method.
// I could have used "switch" but we don't have support for it.
  int getNumberFacilities() {
	if (campusNumber == 1) {
		return 3;
        } else if (campusNumber == 2) {
		return 4;
        } else return 5;
 }
}
-----------------
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

// ListOfAvailableColleges acts as a factory and cache for College flyweight objects
// The client must use this class in order to create "new" College objects
class ListOfAvailableColleges {
  private Map<Integer, College> listOfColleges = new ConcurrentHashMap<Integer, College>();

  College lookup(int collegeNumber) {
    if (!listOfColleges.containsKey(collegeNumber))
      listOfColleges.put(collegeNumber, new College(collegeNumber));
    return listOfColleges.get(collegeNumber);
  }

  int totalAvailableColleges() {
    return listOfColleges.size();
  }
}
---------------------------

class StudentApplication {
  private final int studentNumber;
  private final College college;

  StudentApplication(int studentNumber, College college) {
    this.studentNumber = studentNumber;
    this.college = college;
  }
}
--------------------------------


import java.util.List;
import java.util.Vector;

public class ApplicationWebsite {
  private final List<StudentApplication> listStudentApplications = new Vector<StudentApplication>();
  private final ListOfAvailableColleges listOfAvailableColleges = new ListOfAvailableColleges();

  void submitApplication(int collegeNumber, int studentNumber) {
    College college = listOfAvailableColleges.lookup(collegeNumber);
    StudentApplication studentApplication = new StudentApplication(studentNumber, college);
    listStudentApplications.add(studentApplication);
  }

  int report() {
	  //System.out.println(listOfAvailableColleges.totalAvailableColleges());
    return listOfAvailableColleges.totalAvailableColleges();
  }

  public static void main(String[] args) {
    ApplicationWebsite website = new ApplicationWebsite();

    website.submitApplication(1, 2);
    website.submitApplication(1, 1);
    website.submitApplication(1, 3);
    website.submitApplication(1, 897);
    website.submitApplication(1, 97);
    website.submitApplication(1, 3);
    website.submitApplication(2, 3);
    website.submitApplication(2, 4);
    website.submitApplication(2, 96);
    website.submitApplication(2, 552);
    website.submitApplication(2, 121);
    website.submitApplication(2, 122);

//TODO Add a new function that counts the total applications.

    website.report();
  }
}

