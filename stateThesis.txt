class IntCell {

	predicate HigherThanZero() = value->v && v>0
	predicate MultipleOf3() = value->v && (v % 3 == 0)
	predicate MultipleOf6() = value->v && (v % 6 == 0)
	predicate MultipleOf15() = value->v && (v % 15 == 0)
// TODO might need to add MultippleOf2()

	int value;
	IntCell(int x) {
		value  = x;
	}

	void setValue(int x) {
		value = x;
	}

	Integer getValueInteger() {
		return new Integer(value);
	}
	
	int getValueInt() {
		return value;
	}
}
-------------------------------

interface Statelike {
	predicate StateMultipleOf3();
	predicate StateMultipleOf2();

	final static IntCell cell =  new IntCell(3);    
	Integer computeResult(StateContext context, int num); 
	Integer computeResult2(StateContext context, int num);
	boolean checkMod3();
	boolean checkMod2();
}

class StateMultiplySix implements Statelike {
	predicate StateMultipleOf6() = cell -> c && c@1 MultipleOf6()
	predicate StateMultipleOf3() = cell -> c && c@1 MultipleOf3()
	predicate StateMultipleOf2() = cell -> c && c@1 MultipleOf2()

	--> this@1 StateMultipleOfSix(num) && context@1 state15()
        public Integer computeResult(final StateContext context, final int num) {
        	context.setState(new StateMultiplyFifteen());
		cell.setValue(num*6);
		return cell.getValueInteger();
        } 

	--> this@1 StateMultipleOfTen(num) && context@1 state10()
        public Integer computeResult2(final StateContext context, final int num) {
        	context.setState(new StateMultiplyTen());
		cell.setValue(num*10);
		return cell.getValueInteger();
        }  

	boolean checkMod3() {
		if (cell.getValueInt() % 3) {
			return true; 
		} else { 
			return false; 
		}
	}
 
	boolean checkMod2() {
		if (cell.getValueInt() % 2) {
			return true; 
		} else { 
			return false; 
		}
	}
}

class StateMultiplyFifteen implements Statelike {
	predicate StateMultipleOf15() = cell ->c && c@1 MultipleOf15()
	predicate StateMultipleOf3() = cell -> c && c@1 MultipleOf3()
	predicate StateMultipleOf2() = cell -> c && c@1 MultipleOf2()

        private int count = 0;

	-> this@1 StateMultipleOf15() &&  
	( context@1 state6() || context@1 state15() )
        public Integer computeResultComplicated(final StateContext context, final int num) {
        	if(++count > 1) {
            		context.setState(new StateMultiplySix());
        	}
		cell.setValue(num*15);
		return cell.getValueInteger();
    	}  

	public Integer computeResult(final StateContext context, final int num) {
		cell.setValue(num*15);
            	context.setState(new StateMultiplySix());
		return cell.getValueInteger();
    	} 

	public Integer computeResult2(final StateContext context, final int num) {
		cell.setValue(num*10);
            	context.setState(new StateMultiplySix());
		return cell.getValueInteger();
    	} 

	boolean checkMod3() {
		if (cell.getValueInt() % 3) {
			return true; 
		} else { 
			return false; 
		}
	} 

	boolean checkMod2() {
		if (cell.getValueInt() % 2) {
			return true; 
		} else { 
			return false; 
		}
	}
}

class StateMultiplyTen implements Statelike {
	predicate StateMultipleOf10() = cell -> c && c@1 MultipleOf10()
	predicate StateMultipleOf3() = cell -> c && c@1 MultipleOf3()
	predicate StateMultipleOf2() = cell -> c && c@1 MultipleOf2()

	--> this@1 StateMultipleOfSix(num) && context@1 state15()
        public Integer computeResult(final StateContext context, final int num) {
        	context.setState(new StateMultiplyFifteen());
		cell.setValue(num*6);
		return cell.getValueInteger();
        } 

	--> this@1 StateMultipleOfTen(num) && context@1 state10()
        public Integer computeResult2(final StateContext context, final int num) {
        	context.setState(new StateMultiplyTen());
		cell.setValue(num*10);
		return cell.getValueInteger();
        }  

	boolean checkMod3() {
		if (cell.getValueInt() % 3) {
			return true; 
		} else { 
			return false; 
		}
	}
 
	boolean checkMod2() {
		if (cell.getValueInt() % 2) {
			return true; 
		} else { 
			return false; 
		}
	}
}

--------------
class StateContext {
    	private Statelike myState;

	predicate state6() = myState instanceof StateMultiplySix
	predicate state15() = myState instanceof StateMultiplyFifteen
	predicate state10() = myState instanceof StateMultiplyTen
	predicate stateContextMultiple3() = myState@1 StateMultipleOf3()
	predicate stateContextMultiple6() = myState@1 StateMultipleOf6()
	predicate stateContextMultiple15() = myState@1 StateMultipleOf15()
	predicate stateContextMultiple10() = myState@1 StateMultipleOf10()

	-> this@1 state6() &&  this@1 stateContextMultiple3()
    	StateContext() {
        	setState(new StateMultiplySix());
    	}

    	void setState(final Statelike newState) {
        	myState = newState;
    	}

	-> (this@1 state6() -> (this@1 stateContextMultiple6() && (result % 6 == 0)))
	&&
	(this@1 state15() -> (this@1 stateContextMultiple15() && (result % 15 == 0)))

	public Integer computeResult(final int num) {
        	return myState.computeResult(this, num);
        }

	-> (this@1 state6() -> (this@1 stateContextMultiple6() && (result % 6 == 0)))
	&&
	(this@1 state10() -> (this@1 stateContextMultiple10() && (result % 10 == 0)))

	public Integer computeResult2(final int num) {
        	return myState.computeResult2(this, num);
        }

// TODO write another function computeResult2() that
// will become parallel to the current example, but it will switch between state6 and state10.
// Need to write a new main for that function, that exemplifies it.

	boolean checkMod3Context() {
		return myState.checkMod3();
	} 

	boolean checkMod2Context() {
		return myState.checkMod2();
	} 
}

---------------------
public class StateClient {
	final StateContext sc;

	StateClient(StateContext sc_) {
		sc = sc_;
	}

	sc@1 stateContextMultiple3() -->
	boolean checkMultiplicity3() {
		if (!sc.checkMod3Context()) {
			return false;
		} else {
			return true;
		}
	}

	sc@1 stateContextMultiple2() -->
	boolean checkMultiplicity2() {
		if (!sc.checkMod2Context()) {
			return false;
		} else {
			return true;
		}
	}
	
    	public static void main(String[] args) {
        	final StateContext sc1 = new StateContext();
		StateClient stateClient = new StateClient(sc1);
		stateClient.checkMultiplicity3();
		sc1.computeResult(1);
		stateClient.checkMultiplicity3();
		sc1.computeResult(2);
		stateClient.checkMultiplicity3();
		sc1.computeResult(3);
		stateClient.checkMultiplicity3();

        	final StateContext sc2 = new StateContext();
		StateClient stateClient2 = new StateClient(sc2);
		stateClient2.checkMultiplicity2();
		sc2.computeResult2(1);
		stateClient2.checkMultiplicity2();
		sc2.computeResult2(2);
		stateClient2.checkMultiplicity2();
		sc2.computeResult2(3);
		stateClient2.checkMultiplicity2();				
    }
}

